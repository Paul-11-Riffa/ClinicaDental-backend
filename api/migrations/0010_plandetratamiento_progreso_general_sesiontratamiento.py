# Generated by Django 5.2.6 on 2025-10-27 20:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0009_combos_servicios'),
    ]

    operations = [
        migrations.AddField(
            model_name='plandetratamiento',
            name='progreso_general',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Progreso general del plan (promedio de progreso de ítems activos). SP3-T008', max_digits=5),
        ),
        migrations.CreateModel(
            name='SesionTratamiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_sesion', models.DateField(help_text='Fecha en que se realizó la sesión')),
                ('hora_inicio', models.TimeField(blank=True, help_text='Hora de inicio de la sesión', null=True)),
                ('duracion_minutos', models.PositiveIntegerField(help_text='Duración de la sesión en minutos')),
                ('progreso_anterior', models.DecimalField(decimal_places=2, default=0, help_text='Progreso del ítem antes de esta sesión (0-100%)', max_digits=5)),
                ('progreso_actual', models.DecimalField(decimal_places=2, help_text='Progreso del ítem después de esta sesión (0-100%)', max_digits=5)),
                ('acciones_realizadas', models.TextField(help_text='Descripción detallada de las acciones/procedimientos realizados en esta sesión')),
                ('notas_sesion', models.TextField(blank=True, help_text='Notas adicionales, observaciones o comentarios sobre la sesión', null=True)),
                ('complicaciones', models.TextField(blank=True, help_text='Registro de complicaciones o situaciones inesperadas durante la sesión', null=True)),
                ('evidencias', models.JSONField(blank=True, default=list, help_text='Lista de URLs de evidencias (fotos, radiografías, etc.) asociadas a esta sesión')),
                ('fecha_registro', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora en que se registró esta sesión en el sistema')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, help_text='Última fecha de modificación de la sesión')),
                ('consulta', models.ForeignKey(help_text='Consulta en la que se realizó esta sesión', on_delete=django.db.models.deletion.CASCADE, related_name='sesiones_tratamiento', to='api.consulta')),
                ('empresa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sesiones_tratamiento', to='api.empresa')),
                ('item_plan', models.ForeignKey(help_text='Ítem del plan de tratamiento sobre el que se realiza esta sesión', on_delete=django.db.models.deletion.CASCADE, related_name='sesiones', to='api.itemplandetratamiento')),
                ('usuario_registro', models.ForeignKey(help_text='Usuario (odontólogo/recepcionista) que registró esta sesión', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sesiones_registradas', to='api.usuario')),
            ],
            options={
                'verbose_name': 'Sesión de Tratamiento',
                'verbose_name_plural': 'Sesiones de Tratamiento',
                'db_table': 'sesion_tratamiento',
                'ordering': ['-fecha_sesion', '-hora_inicio'],
                'indexes': [models.Index(fields=['item_plan', 'fecha_sesion'], name='sesion_trat_item_pl_f07435_idx'), models.Index(fields=['consulta'], name='sesion_trat_consult_ce1897_idx'), models.Index(fields=['empresa', 'fecha_sesion'], name='sesion_trat_empresa_315442_idx')],
                'constraints': [models.UniqueConstraint(fields=('consulta', 'item_plan'), name='unique_sesion_por_consulta_item', violation_error_message='Ya existe una sesión registrada para este ítem en esta consulta.'), models.CheckConstraint(condition=models.Q(('progreso_actual__gte', 0), ('progreso_actual__lte', 100)), name='sesion_progreso_actual_valido', violation_error_message='El progreso debe estar entre 0 y 100%.'), models.CheckConstraint(condition=models.Q(('progreso_anterior__gte', 0), ('progreso_anterior__lte', 100)), name='sesion_progreso_anterior_valido', violation_error_message='El progreso anterior debe estar entre 0 y 100%.'), models.CheckConstraint(condition=models.Q(('duracion_minutos__gt', 0)), name='sesion_duracion_positiva', violation_error_message='La duración debe ser mayor a 0 minutos.')],
            },
        ),
    ]
