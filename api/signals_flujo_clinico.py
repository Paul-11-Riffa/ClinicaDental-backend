"""
Signals para el flujo cl√≠nico (Paso 2).

Estos signals manejan transiciones autom√°ticas de estado y validaciones
cuando se ejecutan items del plan de tratamiento.
"""
import logging
from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from .models import Itemplandetratamiento, Plandetratamiento, Consulta

logger = logging.getLogger(__name__)


@receiver(post_save, sender=Itemplandetratamiento)
def auto_verificar_completitud_plan(sender, instance, created, **kwargs):
    """
    Signal que verifica autom√°ticamente si el plan debe marcarse como completado
    cuando se ejecuta un item.
    
    Se dispara despu√©s de guardar un Itemplandetratamiento.
    Si todos los items activos est√°n ejecutados, intenta completar el plan autom√°ticamente.
    """
    # Solo procesar si el item fue ejecutado (tiene fecha_ejecucion)
    if not instance.fecha_ejecucion:
        return
    
    plan = instance.idplantratamiento
    
    # Solo procesar si el plan est√° en ejecuci√≥n
    if plan.estado_tratamiento != 'En Ejecuci√≥n':
        return
    
    # Verificar si todos los items est√°n ejecutados
    puede_completar, mensaje = plan.puede_completarse()
    
    if puede_completar:
        try:
            plan.marcar_completado()
            logger.info(
                f"‚úÖ Plan #{plan.id} completado autom√°ticamente. "
                f"Todos los items fueron ejecutados."
            )
        except Exception as e:
            logger.error(
                f"‚ùå Error al completar autom√°ticamente plan #{plan.id}: {e}"
            )


@receiver(post_save, sender=Itemplandetratamiento)
def validar_consistencia_item_ejecutado(sender, instance, created, **kwargs):
    """
    Valida la consistencia de datos cuando se ejecuta un item.
    
    Verifica que:
    - Si tiene fecha_ejecucion, tiene odontologo_ejecutor
    - Si tiene consulta_ejecucion, pertenece al plan correcto
    """
    if not instance.fecha_ejecucion:
        return
    
    es_valido, errores = instance.validar_datos_ejecucion()
    
    if not es_valido:
        logger.warning(
            f"‚ö†Ô∏è  Item #{instance.id} tiene inconsistencias: {', '.join(errores)}"
        )


@receiver(pre_save, sender=Plandetratamiento)
def validar_transicion_estado_plan(sender, instance, **kwargs):
    """
    Valida las transiciones de estado del plan antes de guardar.
    
    Evita transiciones inv√°lidas de estado_tratamiento.
    """
    # Si es un objeto nuevo, no validar transici√≥n
    if not instance.pk:
        return
    
    try:
        # Obtener el estado anterior
        plan_anterior = Plandetratamiento.objects.get(pk=instance.pk)
        estado_anterior = plan_anterior.estado_tratamiento
        estado_nuevo = instance.estado_tratamiento
        
        # Si no cambi√≥ el estado, no validar
        if estado_anterior == estado_nuevo:
            return
        
        # Definir transiciones v√°lidas
        transiciones_validas = {
            'Propuesto': ['Aceptado', 'Cancelado'],
            'Aceptado': ['En Ejecuci√≥n', 'Cancelado'],
            'En Ejecuci√≥n': ['Completado', 'Pausado', 'Cancelado'],
            'Pausado': ['En Ejecuci√≥n', 'Cancelado'],
            'Completado': [],  # No se puede cambiar desde completado
            'Cancelado': [],  # No se puede cambiar desde cancelado
        }
        
        estados_permitidos = transiciones_validas.get(estado_anterior, [])
        
        if estado_nuevo not in estados_permitidos:
            logger.warning(
                f"‚ö†Ô∏è  Transici√≥n inv√°lida en Plan #{instance.pk}: "
                f"{estado_anterior} ‚Üí {estado_nuevo}. "
                f"Transiciones v√°lidas: {estados_permitidos}"
            )
    
    except Plandetratamiento.DoesNotExist:
        # El plan no existe a√∫n, es una creaci√≥n
        pass


@receiver(post_save, sender=Consulta)
def auto_vincular_plan_a_consulta(sender, instance, created, **kwargs):
    """
    Signal que vincula autom√°ticamente un plan a una consulta cuando se crea.
    
    Solo para consultas que son parte de ejecuci√≥n de un plan (no diagn√≥sticas).
    """
    # Solo procesar consultas nuevas que tengan plan_tratamiento
    if not created or not instance.plan_tratamiento:
        return
    
    plan = instance.plan_tratamiento
    
    # Si el plan est√° en estado Aceptado y esta es la primera consulta de ejecuci√≥n,
    # iniciar autom√°ticamente la ejecuci√≥n del plan
    if plan.estado_tratamiento == 'Aceptado':
        try:
            plan.iniciar_ejecucion()
            logger.info(
                f"‚úÖ Plan #{plan.id} iniciado autom√°ticamente con Consulta #{instance.id}"
            )
        except Exception as e:
            logger.warning(
                f"‚ö†Ô∏è  No se pudo iniciar autom√°ticamente plan #{plan.id}: {e}"
            )


@receiver(post_save, sender=Plandetratamiento)
def log_cambio_estado_plan(sender, instance, created, **kwargs):
    """
    Registra en logs los cambios de estado del plan para auditor√≠a.
    """
    if created:
        logger.info(
            f"üìã Nuevo plan de tratamiento #{instance.id} creado. "
            f"Estado inicial: {instance.estado_tratamiento}"
        )
    else:
        # Solo loguear si hay cambio de estado
        try:
            plan_anterior = Plandetratamiento.objects.get(pk=instance.pk)
            if plan_anterior.estado_tratamiento != instance.estado_tratamiento:
                logger.info(
                    f"üîÑ Plan #{instance.id} cambi√≥ estado: "
                    f"{plan_anterior.estado_tratamiento} ‚Üí {instance.estado_tratamiento}"
                )
        except Plandetratamiento.DoesNotExist:
            pass


# Registrar que los signals est√°n cargados
logger.info("‚úÖ Signals de flujo cl√≠nico registrados")
