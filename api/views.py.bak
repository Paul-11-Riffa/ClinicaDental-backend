# api/views.py
from django.http import JsonResponse, HttpResponse
from django.contrib.auth import get_user_model
from django.db import connection
from django.core.mail import send_mail
from django.conf import settings
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.db.models import Q
from django.utils.timezone import make_aware
from datetime import datetime, timedelta
import csv
from io import BytesIO

from rest_framework import status, serializers
from rest_framework.generics import RetrieveUpdateAPIView
from rest_framework.viewsets import ModelViewSet, ReadOnlyModelViewSet
from rest_framework.permissions import IsAuthenticated
from rest_framework.filters import SearchFilter, OrderingFilter
from rest_framework.response import Response
from rest_framework.decorators import action
from rest_framework import viewsets, mixins
from rest_framework.viewsets import GenericViewSet
from django_filters.rest_framework import DjangoFilterBackend

from .models import (
    Paciente, Consulta, Odontologo, Horario, Tipodeconsulta,
    Usuario, Tipodeusuario, Bitacora, Historialclinico, Consentimiento # Quitado Vista
)

from .serializers import (
    PacienteSerializer,
    ConsultaSerializer,
    CreateConsultaSerializer,
    OdontologoMiniSerializer,
    HorarioSerializer,
    TipodeconsultaSerializer,
    UpdateConsultaSerializer,
    UsuarioAdminSerializer,
    TipodeusuarioSerializer,
    BitacoraSerializer,
    ReprogramarConsultaSerializer,
    HistorialclinicoCreateSerializer,
    HistorialclinicoListSerializer,
    ConsentimientoSerializer
)


# -------------------- Health / Utils --------------------

def health(request):
    """Ping de salud - Muestra informaci√≥n del tenant detectado"""
    tenant = getattr(request, 'tenant', None)

    response_data = {
        "ok": True,
        "tenant_detected": tenant is not None,
    }

    if tenant:
        response_data["tenant"] = {
            "id": tenant.id,
            "nombre": tenant.nombre,
            "subdomain": tenant.subdomain,
            "activo": tenant.activo,
        }
    else:
        response_data["message"] = "No se detect√≥ ning√∫n tenant"

    return JsonResponse(response_data)


def db_health(request):
    """Diagn√≥stico de conexi√≥n a base de datos"""
    from django.db import connection
    import os

    try:
        # Intentar una consulta simple
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            cursor.fetchone()

        db_status = "OK"
        error_msg = None
    except Exception as e:
        db_status = "ERROR"
        error_msg = str(e)

    return JsonResponse({
        "database_status": db_status,
        "database_url_configured": bool(os.getenv("DATABASE_URL")),
        "database_engine": connection.settings_dict.get('ENGINE', 'Unknown'),
        "database_name": connection.settings_dict.get('NAME', 'Unknown'),
        "database_host": connection.settings_dict.get('HOST', 'Unknown'),
        "database_port": connection.settings_dict.get('PORT', 'Unknown'),
        "error": error_msg
    })


def db_info(request):
    """Info r√°pida de la conexi√≥n a DB (√∫til en dev/diagn√≥stico)."""
    try:
        with connection.cursor() as cur:
            cur.execute("SELECT current_database(), current_user, version()")
            db, user, version = cur.fetchone()

        # Cerrar conexi√≥n expl√≠citamente
        connection.close()

        return JsonResponse({
            "database": db,
            "user": user,
            "version": version[:50],  # Limitar longitud
            "status": "connected"
        })
    except Exception as e:
        # Cerrar conexi√≥n en caso de error
        try:
            connection.close()
        except:
            pass

        return JsonResponse({
            "error": str(e),
            "status": "error"
        }, status=500)


def users_count(request):
    """
    Cuenta de usuarios del auth de Django (tabla auth_user).
    NOTA: devolvemos 'count' para cuadrar con el frontend.
    """
    User = get_user_model()
    return JsonResponse({"count": User.objects.count()})


# Helper reutilizable: ¬øel usuario actual es admin en la tabla de negocio?
def _es_admin_por_tabla(dj_user) -> bool:
    email = (getattr(dj_user, "email", None) or getattr(dj_user, "username", "")).strip().lower()
    if not email:
        return False
    return Usuario.objects.filter(
        correoelectronico__iexact=email,
        idtipousuario_id=1  # 1 = Administrador
    ).exists()


# -------------------- Pacientes --------------------

#class PacienteViewSet(ReadOnlyModelViewSet):
    """
    API read-only de Pacientes.
    Requiere sesi√≥n activa (IsAuthenticated) y trae el Usuario relacionado.
    """
    permission_classes = [IsAuthenticated]
    queryset = Paciente.objects.select_related("codusuario").all()
    serializer_class = PacienteSerializer
class PacienteViewSet(ReadOnlyModelViewSet):
    """
    API read-only de Pacientes.
    Solo devuelve pacientes cuyo usuario tiene rol id=2 Y pertenecen a la empresa del tenant.
    """
    permission_classes = [IsAuthenticated]
    serializer_class = PacienteSerializer

    def get_queryset(self):
        """Filtra pacientes por empresa (multi-tenancy)"""
        queryset = (
            Paciente.objects
            .select_related("codusuario")
            .filter(codusuario__idtipousuario_id=2)
        )

        # Filtrar por tenant si est√° disponible
        if hasattr(self.request, 'tenant') and self.request.tenant:
            queryset = queryset.filter(empresa=self.request.tenant)

        return queryset

# -------------------- Consultas (Citas) --------------------

class ConsultaViewSet(ModelViewSet):
    """
    API para Consultas. Permite crear, leer, actualizar y eliminar.
    Filtrado por tenant (multi-tenancy).
    """
    permission_classes = [IsAuthenticated]
    serializer_class = ConsultaSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['codpaciente', 'fecha']

    def get_queryset(self):
        """Filtra consultas por empresa (multi-tenancy)"""
        queryset = Consulta.objects.select_related(
            "codpaciente__codusuario",
            "cododontologo__codusuario",
            "codrecepcionista__codusuario",
            "idhorario",
            "idtipoconsulta",
            "idestadoconsulta",
        )

        # Filtrar por tenant si est√° disponible
        if hasattr(self.request, 'tenant') and self.request.tenant:
            queryset = queryset.filter(empresa=self.request.tenant)

        return queryset

    def perform_create(self, serializer):
        """Asigna autom√°ticamente la empresa del tenant al crear una consulta"""
        # Asignar empresa del tenant
        if hasattr(self.request, 'tenant') and self.request.tenant:
            serializer.save(empresa=self.request.tenant)
        else:
            serializer.save()

        # Enviar email de confirmaci√≥n (c√≥digo existente)
        consulta = serializer.instance
        paciente = consulta.codpaciente
        usuario_paciente = paciente.codusuario

        if getattr(usuario_paciente, "notificaciones_email", False):
            try:
                subject = "Confirmaci√≥n de tu cita en Cl√≠nica Dental"
                fecha_formateada = consulta.fecha.strftime('%d de %B de %Y')
                hora_formateada = consulta.idhorario.hora.strftime('%H:%M')

                message = f"""
Hola {usuario_paciente.nombre},

Tu cita ha sido agendada exitosamente con los siguientes detalles:

üìÖ Fecha: {fecha_formateada}
üïê Hora: {hora_formateada}
üë®‚Äç‚öïÔ∏è Odont√≥logo: Dr. {consulta.cododontologo.codusuario.nombre} {consulta.cododontologo.codusuario.apellido}
ü¶∑ Tipo de consulta: {consulta.idtipoconsulta.nombreconsulta}

Recuerda llegar 15 minutos antes de tu cita.

¬°Te esperamos en Smile Studio!

Si necesitas cancelar o reprogramar tu cita, ponte en contacto con nosotros.
                """

                from_email = settings.DEFAULT_FROM_EMAIL
                recipient_list = [usuario_paciente.correoelectronico]
                send_mail(subject, message, from_email, recipient_list, fail_silently=False)

            except Exception as e:
                print(f"Error al enviar correo de notificaci√≥n: {e}")

    def get_serializer_class(self):
        # --- MODIFICACI√ìN: A√±adir el nuevo serializador ---
        if self.action == 'reprogramar':
            return ReprogramarConsultaSerializer
        if self.action in ["create", "update"]:
            return CreateConsultaSerializer
        if self.action == "partial_update":
            return UpdateConsultaSerializer
        return ConsultaSerializer

    @action(detail=True, methods=['patch'], url_path='reprogramar')
    def reprogramar(self, request, pk=None):
        """
        Reprograma una cita a una nueva fecha y/o horario.
        Valida que el nuevo horario est√© libre.
        """
        consulta = self.get_object()

        # Pasamos la instancia de la consulta al contexto del serializador para la validaci√≥n
        serializer = self.get_serializer(data=request.data, context={'consulta': consulta})
        serializer.is_valid(raise_exception=True)

        nueva_fecha = serializer.validated_data['fecha']
        nuevo_horario = serializer.validated_data['idhorario']

        # Actualizar la consulta
        consulta.fecha = nueva_fecha
        consulta.idhorario = nuevo_horario

        # Opcional: Cambiar estado a 'Reprogramada' si existe (ej. id=5)
        # consulta.idestadoconsulta_id = 5
        consulta.save()

        # Refrescar desde la BD para obtener todas las relaciones
        consulta.refresh_from_db()

        # TODO: Considera enviar una notificaci√≥n de reprogramaci√≥n por email

        # Devolver la consulta completa actualizada con todas sus relaciones
        consulta_serializer = ConsultaSerializer(consulta)
        return Response(consulta_serializer.data, status=status.HTTP_200_OK)


    # --- NUEVA ACCI√ìN: Cancelar Cita (eliminar definitivamente) ---
    @action(detail=True, methods=['post'], url_path='cancelar')
    def cancelar(self, request, pk=None):
        """
        Cancela una cita elimin√°ndola de la base de datos.
        Registra la cancelaci√≥n en la bit√°cora antes de eliminar.
        """
        from datetime import date
        from .models import Bitacora, Usuario

        consulta = self.get_object()
        consulta_id = consulta.pk
        consulta_info = f"Cita #{consulta_id} - Paciente: {consulta.codpaciente.codusuario.nombre} {consulta.codpaciente.codusuario.apellido}"

        # Registrar en bit√°cora antes de eliminar
        try:
            usuario = None
            if request.user.is_authenticated:
                try:
                    usuario = Usuario.objects.get(correoelectronico=request.user.email)
                except Usuario.DoesNotExist:
                    pass

            from api.middleware import get_client_ip
            Bitacora.objects.create(
                accion='cancelar_cita',
                descripcion=f'Cita cancelada: {consulta_info}',
                usuario=usuario,
                ip_address=get_client_ip(request),
                user_agent=request.META.get('HTTP_USER_AGENT', ''),
                modelo_afectado='Consulta',
                objeto_id=consulta_id,
                datos_adicionales={
                    'fecha': str(consulta.fecha),
                    'horario': consulta.idhorario.hora if consulta.idhorario else 'N/A',
                    'odontologo': f"{consulta.cododontologo.codusuario.nombre} {consulta.cododontologo.codusuario.apellido}" if consulta.cododontologo else 'N/A'
                }
            )
        except Exception as log_error:
            print(f"[Bitacora] No se pudo guardar el log de cancelaci√≥n: {log_error}")

        # Eliminar la cita
        consulta.delete()

        # TODO: Opcional - enviar notificaci√≥n de cancelaci√≥n por email

        return Response(
            {"ok": True, "detail": "La cita ha sido cancelada y eliminada.", "id": consulta_id},
            status=status.HTTP_200_OK
        )

    # --- NUEVA ACCI√ìN: Eliminar citas vencidas autom√°ticamente ---
    @action(detail=False, methods=['delete'], url_path='eliminar-vencidas')
    def eliminar_vencidas(self, request):
        """
        Elimina autom√°ticamente todas las citas que ya pasaron de fecha.
        Esta funci√≥n puede ser llamada desde el frontend o desde un cron job.
        """
        from datetime import date
        from .models import Bitacora, Usuario

        citas_vencidas = Consulta.objects.filter(fecha__lt=date.today())
        cantidad = citas_vencidas.count()

        if cantidad == 0:
            return Response(
                {"ok": True, "detail": "No hay citas vencidas para eliminar.", "cantidad": 0},
                status=status.HTTP_200_OK
            )

        # Registrar en bit√°cora
        try:
            usuario = None
            if request.user.is_authenticated:
                try:
                    usuario = Usuario.objects.get(correoelectronico=request.user.email)
                except Usuario.DoesNotExist:
                    pass

            from api.middleware import get_client_ip
            Bitacora.objects.create(
                accion='limpiar_citas_vencidas',
                descripcion=f'Eliminadas {cantidad} citas vencidas',
                usuario=usuario,
                ip_address=get_client_ip(request),
                user_agent=request.META.get('HTTP_USER_AGENT', ''),
                modelo_afectado='Consulta',
                datos_adicionales={
                    'cantidad_eliminadas': cantidad,
                    'fecha_limpieza': str(date.today())
                }
            )
        except Exception as log_error:
            print(f"[Bitacora] No se pudo guardar el log de limpieza: {log_error}")

        # Eliminar todas las citas vencidas
        citas_vencidas.delete()

        return Response(
            {
                "ok": True,
                "detail": f"Se eliminaron {cantidad} citas vencidas.",
                "cantidad": cantidad
            },
            status=status.HTTP_200_OK
        )

# -------------------- Cat√°logos --------------------

class OdontologoViewSet(ReadOnlyModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = OdontologoMiniSerializer

    def get_queryset(self):
        """Filtra odont√≥logos por empresa (multi-tenancy)"""
        queryset = Odontologo.objects.all()

        # Filtrar por tenant si est√° disponible
        if hasattr(self.request, 'tenant') and self.request.tenant:
            queryset = queryset.filter(empresa=self.request.tenant)

        return queryset


class HorarioViewSet(ReadOnlyModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = HorarioSerializer

    def get_queryset(self):
        """Filtra horarios por empresa (multi-tenancy)"""
        queryset = Horario.objects.all()

        # Filtrar por tenant si est√° disponible
        if hasattr(self.request, 'tenant') and self.request.tenant:
            queryset = queryset.filter(empresa=self.request.tenant)

        return queryset

    @action(detail=False, methods=['get'], url_path='disponibles')
    def disponibles(self, request):
        """
        Obtiene horarios disponibles para una fecha y odont√≥logo espec√≠ficos.
        Par√°metros: fecha (YYYY-MM-DD), odontologo_id
        """
        fecha = request.query_params.get('fecha')
        odontologo_id = request.query_params.get('odontologo_id')

        if not fecha or not odontologo_id:
            return Response(
                {"detail": "Se requieren los par√°metros 'fecha' y 'odontologo_id'."},
                status=status.HTTP_400_BAD_REQUEST
            )

        # Obtener todos los horarios del tenant
        todos_horarios = self.get_queryset()

        # Filtrar horarios ocupados para ese odont√≥logo en esa fecha (mismo tenant)
        horarios_ocupados_query = Consulta.objects.filter(
            cododontologo_id=odontologo_id,
            fecha=fecha
        )

        # Filtrar por tenant
        if hasattr(request, 'tenant') and request.tenant:
            horarios_ocupados_query = horarios_ocupados_query.filter(empresa=request.tenant)

        horarios_ocupados = horarios_ocupados_query.values_list('idhorario_id', flat=True)

        # Horarios disponibles = todos - ocupados
        horarios_disponibles = todos_horarios.exclude(id__in=horarios_ocupados)

        serializer = self.get_serializer(horarios_disponibles, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)


class TipodeconsultaViewSet(ReadOnlyModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = TipodeconsultaSerializer

    def get_queryset(self):
        """Filtra tipos de consulta por empresa (multi-tenancy)"""
        queryset = Tipodeconsulta.objects.all()

        # Filtrar por tenant si est√° disponible
        if hasattr(self.request, 'tenant') and self.request.tenant:
            queryset = queryset.filter(empresa=self.request.tenant)

        return queryset


# -------------------- ADMIN: Roles y Usuarios --------------------

class TipodeusuarioViewSet(ReadOnlyModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = TipodeusuarioSerializer
    pagination_class = None

    def get_queryset(self):
        """Filtra tipos de usuario por empresa (multi-tenancy)"""
        queryset = Tipodeusuario.objects.all().order_by("id")

        # Filtrar por tenant si est√° disponible
        if hasattr(self.request, 'tenant') and self.request.tenant:
            queryset = queryset.filter(empresa=self.request.tenant)

        return queryset


class UsuarioViewSet(ModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = UsuarioAdminSerializer

    filter_backends = [SearchFilter, OrderingFilter]
    search_fields = ["nombre", "apellido", "correoelectronico"]
    ordering = ["apellido", "nombre"]

    lookup_field = "codigo"
    http_method_names = ["get", "patch", "head", "options"]

    def get_queryset(self):
        """Filtra usuarios por empresa (multi-tenancy)"""
        queryset = Usuario.objects.select_related("idtipousuario")

        # Filtrar por tenant si est√° disponible
        if hasattr(self.request, 'tenant') and self.request.tenant:
            queryset = queryset.filter(empresa=self.request.tenant)

        return queryset

    def partial_update(self, request, *args, **kwargs):
        """
        Autorizaci√≥n: solo administradores pueden cambiar roles.
        Admin = user.is_staff OR Usuario.idtipousuario_id == 1 (buscando por email/username).
        """
        user = request.user
        is_staff = getattr(user, "is_staff", False)
        es_admin_tabla = _es_admin_por_tabla(user)

        if not (is_staff or es_admin_tabla):
            return Response({"detail": "Solo administradores pueden cambiar roles."}, status=403)

        return super().partial_update(request, *args, **kwargs)



def ping(_):
    return JsonResponse({"ok": True})

# -------------------- Perfil de Usuario --------------------

class UserProfileView(RetrieveUpdateAPIView):
    """
    Vista para leer y actualizar los datos del perfil del usuario autenticado.
    Soporta GET, PUT y PATCH.
    """
    # Necesitar√≠as agregar UsuarioMeSerializer en serializers.py
    # serializer_class = UsuarioMeSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        """
        En lugar de devolver request.user directamente, buscamos el perfil 'Usuario'
        que est√° vinculado a ese usuario de autenticaci√≥n.
        """
        try:
            usuario_perfil = Usuario.objects.get(correoelectronico__iexact=self.request.user.email)
            return usuario_perfil
        except Usuario.DoesNotExist:
            return None

# -------------------- Historias Cl√≠nicas (HCE) --------------------

class HistorialclinicoViewSet(mixins.CreateModelMixin,
                              mixins.ListModelMixin,
                              GenericViewSet):
    """
    Endpoints:
      - POST /api/historias-clinicas/                (crear HCE; calcula episodio siguiente y valida duplicado por d√≠a+motivo)
      - GET  /api/historias-clinicas/?paciente=<id>  (listar HCE por paciente; ordenado por fecha/episodio)
    """
    permission_classes = [IsAuthenticated]

    def get_serializer_class(self):
        return (HistorialclinicoCreateSerializer
                if self.action == 'create'
                else HistorialclinicoListSerializer)

    def get_queryset(self):
        """Filtra historias cl√≠nicas por empresa (multi-tenancy)"""
        qs = Historialclinico.objects.select_related(
            'pacientecodigo', 'pacientecodigo__codusuario'
        )

        # Filtrar por tenant si est√° disponible
        if hasattr(self.request, 'tenant') and self.request.tenant:
            qs = qs.filter(empresa=self.request.tenant)

        # Filtro adicional por paciente espec√≠fico
        pid = self.request.query_params.get('paciente')
        if pid:
            qs = qs.filter(pacientecodigo_id=pid)

        return qs.order_by('-fecha', '-episodio')

    @action(detail=False, methods=['get'])
    def consentimientos(self, request):
        """
        Obtiene el historial de consentimientos del paciente.
        
        Query params:
        - paciente: ID del paciente (requerido)
        - desde: Fecha inicial (opcional, formato YYYY-MM-DD)
        - hasta: Fecha final (opcional, formato YYYY-MM-DD)
        """
        from .models_consent import Consentimiento
        from django.utils.dateparse import parse_date
        
        # Validar paciente
        pid = request.query_params.get('paciente')
        if not pid:
            return Response(
                {"error": "Se requiere el par√°metro 'paciente'"},
                status=status.HTTP_400_BAD_REQUEST
            )
            
        # Construir filtro base
        filters = {'paciente_id': pid}
        
        # Agregar filtros de fecha si se proporcionan
        desde = request.query_params.get('desde')
        hasta = request.query_params.get('hasta')
        
        if desde:
            fecha_desde = parse_date(desde)
            if fecha_desde:
                filters['fecha_firma__date__gte'] = fecha_desde
                
        if hasta:
            fecha_hasta = parse_date(hasta)
            if fecha_hasta:
                filters['fecha_firma__date__lte'] = fecha_hasta
                
        # Filtrar por tenant si est√° disponible
        if hasattr(request, 'tenant') and request.tenant:
            filters['empresa'] = request.tenant
            
        # Obtener consentimientos
        consentimientos = Consentimiento.objects.filter(**filters).order_by('-fecha_firma')
        
        # Serializar resultados
        from .serializers_consent import ConsentimientoSerializer
        serializer = ConsentimientoSerializer(consentimientos, many=True)
        
        return Response(serializer.data)

    def perform_create(self, serializer):
        """Asigna autom√°ticamente la empresa del tenant al crear historia cl√≠nica"""
        if hasattr(self.request, 'tenant') and self.request.tenant:
            serializer.save(empresa=self.request.tenant)
        else:
            serializer.save()

# -------------------- Consentimiento Digital --------------------
class ConsentimientoViewSet(ModelViewSet):
    """
    API para gestionar los Consentimientos Digitales.
    - `GET /api/consentimientos/`: Lista todos los consentimientos del tenant.
    - `GET /api/consentimientos/?paciente=<id>`: Filtra consentimientos por paciente.
    - `POST /api/consentimientos/`: Crea un nuevo consentimiento.
    """
    permission_classes = [IsAuthenticated]
    serializer_class = ConsentimientoSerializer
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_fields = ['paciente']
    search_fields = ['paciente__codusuario__nombre', 'paciente__codusuario__apellido', 'titulo']

    def perform_create(self, serializer):
        """
        Asegura que el tenant est√© configurado antes de crear el consentimiento
        """
        if not hasattr(self.request, 'tenant') or not self.request.tenant:
            raise serializers.ValidationError({
                "error": "No se pudo determinar el tenant",
                "detail": "Se requiere un tenant v√°lido para crear consentimientos"
            })
        
        print(f"[ConsentimientoViewSet] Creating consent with tenant: {self.request.tenant}")
        serializer.save()

    def get_queryset(self):
        """
        Filtra los consentimientos para que solo se muestren los que pertenecen
        a la empresa (tenant) actual.
        """
        # Iniciar con el queryset base y optimizar consulta
        queryset = Consentimiento.objects.select_related('paciente__codusuario', 'empresa')
        
        # Aplicar filtro por tenant
        if hasattr(self.request, 'tenant'):
            queryset = queryset.filter(empresa=self.request.tenant)
        else:
            queryset = queryset.none()  # Si no hay tenant, no mostrar nada
            
        return queryset

        # Filtrar por el tenant detectado en el request
        if hasattr(self.request, 'tenant') and self.request.tenant:
            queryset = queryset.filter(empresa=self.request.tenant)
        else:
            # Si no hay tenant, no se devuelve nada por seguridad
            return Consentimiento.objects.none()
            
        return queryset.order_by('-fecha_creacion')

    def get_serializer_context(self):
        """
        Inyecta el objeto 'request' en el contexto del serializador.
        Esto es crucial para que el serializador pueda acceder al tenant y a la IP.
        """
        return {'request': self.request}

# -------------------- Bit√°cora de Auditor√≠a --------------------

# Reemplaza solo la clase BitacoraViewSet en tu api/views.py

class BitacoraViewSet(ReadOnlyModelViewSet):
    """
    API read-only para la Bit√°cora de auditor√≠a.
    Solo usuarios admin pueden ver los registros.
    """
    permission_classes = [IsAuthenticated]
    serializer_class = BitacoraSerializer
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    search_fields = ['descripcion', 'usuario__nombre', 'usuario__apellido', 'ip_address']
    ordering_fields = ['fecha_hora', 'accion', 'usuario__nombre']
    ordering = ['-fecha_hora']  # M√°s recientes primero

    def get_queryset(self):
        # Solo admins pueden ver la bit√°cora
        if not _es_admin_por_tabla(self.request.user):
            return Bitacora.objects.none()

        queryset = Bitacora.objects.select_related('usuario')

        # Filtrar por tenant si est√° disponible (multi-tenancy)
        if hasattr(self.request, 'tenant') and self.request.tenant:
            queryset = queryset.filter(empresa=self.request.tenant)

        # Filtros opcionales por par√°metros GET
        accion = self.request.query_params.get('accion', None)
        if accion:
            queryset = queryset.filter(accion=accion)

        usuario_id = self.request.query_params.get('usuario_id', None)
        if usuario_id:
            queryset = queryset.filter(usuario_id=usuario_id)

        # Filtro por fechas
        fecha_desde = self.request.query_params.get('fecha_desde', None)
        fecha_hasta = self.request.query_params.get('fecha_hasta', None)

        if fecha_desde:
            try:
                fecha_desde = datetime.strptime(fecha_desde, '%Y-%m-%d')
                fecha_desde = make_aware(fecha_desde)
                queryset = queryset.filter(fecha_hora__gte=fecha_desde)
            except ValueError:
                pass

        if fecha_hasta:
            try:
                fecha_hasta = datetime.strptime(fecha_hasta, '%Y-%m-%d')
                fecha_hasta = make_aware(fecha_hasta.replace(hour=23, minute=59, second=59))
                queryset = queryset.filter(fecha_hora__lte=fecha_hasta)
            except ValueError:
                pass

        return queryset

    @action(detail=False, methods=['get'], url_path='estadisticas')
    def estadisticas(self, request):
        """
        Endpoint para obtener estad√≠sticas de la bit√°cora
        """
        if not _es_admin_por_tabla(request.user):
            return Response(
                {"detail": "No tienes permisos para ver las estad√≠sticas."},
                status=status.HTTP_403_FORBIDDEN
            )

        # Estad√≠sticas de los √∫ltimos 30 d√≠as
        fecha_limite = make_aware(datetime.now() - timedelta(days=30))
        queryset = Bitacora.objects.filter(fecha_hora__gte=fecha_limite)

        # Contar por acci√≥n
        acciones = {}
        for registro in queryset:
            accion = registro.get_accion_display()
            acciones[accion] = acciones.get(accion, 0) + 1

        # Usuarios m√°s activos
        usuarios_activos = {}
        for registro in queryset.filter(usuario__isnull=False).select_related('usuario'):
            nombre = f"{registro.usuario.nombre} {registro.usuario.apellido}"
            usuarios_activos[nombre] = usuarios_activos.get(nombre, 0) + 1

        # Ordenar usuarios por actividad
        usuarios_activos = dict(sorted(usuarios_activos.items(), key=lambda x: x[1], reverse=True)[:10])

        # Actividad por d√≠a (√∫ltimos 7 d√≠as)
        actividad_diaria = {}
        for i in range(7):
            fecha = datetime.now() - timedelta(days=i)
            fecha_str = fecha.strftime('%d/%m')
            inicio_dia = make_aware(fecha.replace(hour=0, minute=0, second=0, microsecond=0))
            fin_dia = make_aware(fecha.replace(hour=23, minute=59, second=59, microsecond=999999))

            count = queryset.filter(fecha_hora__range=[inicio_dia, fin_dia]).count()
            actividad_diaria[fecha_str] = count

        return Response({
            'total_registros': queryset.count(),
            'acciones': acciones,
            'usuarios_activos': usuarios_activos,
            'actividad_diaria': actividad_diaria,
            'periodo': '√öltimos 30 d√≠as'
        })

    @action(detail=False, methods=['get'], url_path='export')
    def export(self, request):
        """
        Endpoint para exportar bit√°cora en CSV o PDF
        """
        if not _es_admin_por_tabla(request.user):
            return Response(
                {"detail": "No tienes permisos para exportar la bit√°cora."},
                status=status.HTTP_403_FORBIDDEN
            )

        format_type = request.query_params.get('format', 'csv').lower()

        # Obtener datos con filtros aplicados
        queryset = self.get_queryset()

        # Aplicar filtros de la query
        accion = request.query_params.get('accion', None)
        if accion:
            queryset = queryset.filter(accion=accion)

        fecha_desde = request.query_params.get('fecha_desde', None)
        fecha_hasta = request.query_params.get('fecha_hasta', None)

        if fecha_desde:
            try:
                fecha_desde = datetime.strptime(fecha_desde, '%Y-%m-%d')
                fecha_desde = make_aware(fecha_desde)
                queryset = queryset.filter(fecha_hora__gte=fecha_desde)
            except ValueError:
                pass

        if fecha_hasta:
            try:
                fecha_hasta = datetime.strptime(fecha_hasta, '%Y-%m-%d')
                fecha_hasta = make_aware(fecha_hasta.replace(hour=23, minute=59, second=59))
                queryset = queryset.filter(fecha_hora__lte=fecha_hasta)
            except ValueError:
                pass

        search = request.query_params.get('search', None)
        if search:
            queryset = queryset.filter(
                Q(descripcion__icontains=search) |
                Q(usuario__nombre__icontains=search) |
                Q(usuario__apellido__icontains=search) |
                Q(ip_address__icontains=search)
            )

        if format_type == 'csv':
            return self._export_csv(queryset)
        elif format_type == 'pdf':
            return self._export_pdf(queryset)
        else:
            return Response({"detail": "Formato no soportado"}, status=status.HTTP_400_BAD_REQUEST)

    def _export_csv(self, queryset):
        """Exportar a CSV"""
        response = HttpResponse(content_type='text/csv; charset=utf-8')
        response['Content-Disposition'] = f'attachment; filename="bitacora_{datetime.now().strftime("%Y%m%d")}.csv"'

        # Agregar BOM para Excel
        response.write('\ufeff')

        writer = csv.writer(response)

        # Escribir headers
        writer.writerow([
            'Fecha/Hora',
            'Acci√≥n',
            'Usuario',
            'Descripci√≥n',
            'IP',
            'Navegador',
            'Modelo Afectado',
            'Objeto ID'
        ])

        # Escribir datos
        for entry in queryset[:1000]:  # Limitar a 1000 registros
            usuario_nombre = f"{entry.usuario.nombre} {entry.usuario.apellido}" if entry.usuario else "Usuario an√≥nimo"

            writer.writerow([
                entry.fecha_hora.strftime('%d/%m/%Y %H:%M:%S'),
                entry.get_accion_display(),
                usuario_nombre,
                entry.descripcion or '',
                entry.ip_address,
                entry.user_agent or '',
                entry.modelo_afectado or '',
                entry.objeto_id or ''
            ])

        return response

    def _export_pdf(self, queryset):
        """Exportar a PDF"""
        try:
            from reportlab.lib.pagesizes import A4
            from reportlab.lib import colors
            from reportlab.lib.units import inch
            from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        except ImportError:
            return Response(
                {"detail": "PDF export no disponible. Instale reportlab: pip install reportlab"},
                status=status.HTTP_400_BAD_REQUEST
            )

        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        elements = []

        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            alignment=1  # Centrado
        )

        # T√≠tulo
        title = Paragraph("Bit√°cora de Auditor√≠a", title_style)
        elements.append(title)

        # Fecha de generaci√≥n
        fecha_gen = Paragraph(f"Generado el: {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Normal'])
        elements.append(fecha_gen)
        elements.append(Spacer(1, 20))

        # Datos de la tabla
        data = [['Fecha/Hora', 'Acci√≥n', 'Usuario', 'Descripci√≥n', 'IP']]

        for entry in queryset[:100]:  # Limitar a 100 para PDF
            usuario_nombre = f"{entry.usuario.nombre} {entry.usuario.apellido}" if entry.usuario else "An√≥nimo"

            data.append([
                entry.fecha_hora.strftime('%d/%m/%Y %H:%M'),
                entry.get_accion_display(),
                usuario_nombre,
                (entry.descripcion or '')[:50] + '...' if len(entry.descripcion or '') > 50 else (
                        entry.descripcion or ''),
                entry.ip_address
            ])

        # Crear tabla
        table = Table(data, colWidths=[1.2 * inch, 1 * inch, 1.2 * inch, 2 * inch, 1 * inch])

        # Estilo de tabla
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))

        elements.append(table)
        doc.build(elements)

        buffer.seek(0)
        response = HttpResponse(buffer.read(), content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="bitacora_{datetime.now().strftime("%Y%m%d")}.pdf"'

        return response
