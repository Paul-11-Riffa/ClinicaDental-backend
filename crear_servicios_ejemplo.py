"""
Script para crear servicios de ejemplo en el cat√°logo
"""
import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dental_clinic_backend.settings')
django.setup()

from decimal import Decimal
from api.models import Empresa, Servicio

def crear_servicios_ejemplo():
    """Crea servicios de ejemplo para la cl√≠nica"""
    
    # Obtener la empresa SmileStudio
    try:
        empresa = Empresa.objects.get(subdomain='smilestudio')
        print(f"‚úÖ Empresa encontrada: {empresa.nombre}")
    except Empresa.DoesNotExist:
        print("‚ùå Error: No se encontr√≥ la empresa 'smilestudio'")
        print("Empresas disponibles:")
        for emp in Empresa.objects.all():
            print(f"  - {emp.subdomain}: {emp.nombre}")
        return
    
    # Servicios de ejemplo
    servicios_data = [
        {
            'nombre': 'Limpieza Dental Profesional',
            'descripcion': 'Limpieza dental completa con ultrasonido, incluye pulido, fluorizaci√≥n y revisi√≥n de enc√≠as. Elimina sarro y placa bacteriana.',
            'costobase': Decimal('150.00'),
            'duracion': 45,
            'activo': True
        },
        {
            'nombre': 'Blanqueamiento Dental',
            'descripcion': 'Blanqueamiento dental profesional con gel de per√≥xido de hidr√≥geno. Resultados visibles desde la primera sesi√≥n. Incluye protector de enc√≠as.',
            'costobase': Decimal('400.00'),
            'duracion': 60,
            'activo': True
        },
        {
            'nombre': 'Consulta General',
            'descripcion': 'Consulta dental general con revisi√≥n completa, diagn√≥stico y plan de tratamiento. Incluye rayos X si es necesario.',
            'costobase': Decimal('50.00'),
            'duracion': 30,
            'activo': True
        },
        {
            'nombre': 'Endodoncia (Tratamiento de Conducto)',
            'descripcion': 'Tratamiento de conducto completo para salvar dientes con infecci√≥n o da√±o en la pulpa. Incluye anestesia local y medicaci√≥n.',
            'costobase': Decimal('800.00'),
            'duracion': 90,
            'activo': True
        },
        {
            'nombre': 'Ortodoncia Mensual',
            'descripcion': 'Control mensual de ortodoncia con brackets met√°licos. Incluye ajuste de brackets, cambio de ligas y revisi√≥n de progreso.',
            'costobase': Decimal('200.00'),
            'duracion': 30,
            'activo': True
        },
        {
            'nombre': 'Extracci√≥n Simple',
            'descripcion': 'Extracci√≥n dental simple con anestesia local. Incluye medicaci√≥n post-operatoria y recomendaciones de cuidado.',
            'costobase': Decimal('150.00'),
            'duracion': 30,
            'activo': True
        },
        {
            'nombre': 'Corona Dental',
            'descripcion': 'Corona de porcelana o metal-porcelana para restaurar dientes da√±ados. Incluye toma de impresi√≥n y colocaci√≥n.',
            'costobase': Decimal('1200.00'),
            'duracion': 60,
            'activo': True
        },
        {
            'nombre': 'Implante Dental',
            'descripcion': 'Implante de titanio de alta calidad con corona incluida. Soluci√≥n permanente para reemplazar dientes perdidos.',
            'costobase': Decimal('2500.00'),
            'duracion': 120,
            'activo': True
        }
    ]
    
    print(f"\n{'='*60}")
    print(f"Creando servicios para: {empresa.nombre}")
    print(f"{'='*60}\n")
    
    servicios_creados = 0
    servicios_existentes = 0
    
    for servicio_data in servicios_data:
        # Verificar si ya existe
        existe = Servicio.objects.filter(
            nombre=servicio_data['nombre'],
            empresa=empresa
        ).exists()
        
        if existe:
            print(f"‚ö†Ô∏è  Ya existe: {servicio_data['nombre']}")
            servicios_existentes += 1
        else:
            servicio = Servicio.objects.create(
                empresa=empresa,
                **servicio_data
            )
            print(f"‚úÖ Creado: {servicio.nombre} - ${servicio.costobase} ({servicio.duracion} min)")
            servicios_creados += 1
    
    print(f"\n{'='*60}")
    print(f"üìä Resumen:")
    print(f"  ‚úÖ Servicios creados: {servicios_creados}")
    print(f"  ‚ö†Ô∏è  Servicios existentes: {servicios_existentes}")
    print(f"  üìù Total de servicios en cat√°logo: {Servicio.objects.filter(empresa=empresa, activo=True).count()}")
    print(f"{'='*60}\n")
    
    # Mostrar todos los servicios activos
    print("üîç Servicios activos en el cat√°logo:\n")
    servicios = Servicio.objects.filter(empresa=empresa, activo=True).order_by('nombre')
    for i, servicio in enumerate(servicios, 1):
        print(f"{i}. {servicio.nombre}")
        print(f"   üí∞ Precio: ${servicio.costobase}")
        print(f"   ‚è±Ô∏è  Duraci√≥n: {servicio.duracion} minutos")
        print()

if __name__ == '__main__':
    print("üè• Script de Creaci√≥n de Servicios de Ejemplo\n")
    crear_servicios_ejemplo()
    print("‚úÖ Proceso completado!")
